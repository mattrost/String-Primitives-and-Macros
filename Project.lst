Microsoft (R) Macro Assembler Version 14.28.29915.0	    06/04/21 18:49:48
2String Primitives and Macros    (Proj6_rostma.asm	     Page 1 - 1


				TITLE String Primitives and Macros    (Proj6_rostma.asm)

				; Author: Matthew Rost
				; Last Modified: 6/3/2021
				; OSU email address: rostma@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:                 Due Date: 6/6/2021
				; Description: This is the portfolio project file for CS 271. This file
				;              is a program that implements macros for string processing.
				;			   It also uses procedures for signed integers which use
				;			   string primitive isntructions. This will get a user string
				;			   input and convert the ascii digits to its numeric value.
				;			   The program will get 10 valid integers from the user and
				;			   store them into an array. It will then display the integers,
				;			   their sum, and their average.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)
				mGetString MACRO prompt, user_input, input_length

					PUSH		EDX
					PUSH		ECX
					PUSH		EAX

					MOV			EDX, prompt
					CALL		WriteString

					MOV			EDX, user_input
					MOV			ECX, HI

					CALL		ReadString
					MOV			input_length, EAX

					POP			EAX
					POP			ECX
					POP			EDX
				ENDM

				; mDisplayString based off of MacroDemo.asm from Module 8 - Exploration 2
				mDisplayString MACRO string

					MOV			EDX, string
					CALL		WriteString

				ENDM

 = 0000000A			HI = 10

 00000000			.data

 00000000 50 52 4F 47 52		assignment			BYTE		"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures", 0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   00
 0000003D 57 72 69 74 74		author				BYTE		"Written By: Matthew Rost", 0
	   65 6E 20 42 79
	   3A 20 4D 61 74
	   74 68 65 77 20
	   52 6F 73 74 00
 00000056 50 6C 65 61 73		instruction_1		BYTE		"Please provide 10 signed decimal integers.", 0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 00
 00000081 45 61 63 68 20		instruction_2		BYTE		"Each number needs to be small enough to fit inside a 32 bit register. After you have finished inputting the", 0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   41 66 74 65 72
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 00
 000000ED 72 61 77 20 6E		instruction_3		BYTE		"raw numbers, this will display a list of the integers, their sum, and their average value.", 0
	   75 6D 62 65 72
	   73 2C 20 74 68
	   69 73 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 2C 20
	   74 68 65 69 72
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   00
 00000148 50 6C 65 61 73		input_prompt		BYTE		"Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000167 45 52 52 4F 52		input_bad			BYTE		"ERROR: You did not enter a signed number or your number was too big.", 0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 00
 000001AC 50 6C 65 61 73		input_try_again		BYTE		"Please try again: ", 0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 000001BF  0000000A [			integers			SDWORD		10 DUP(?)
	    00000000
	   ]
 000001E7  00000021 [			string				BYTE		33 DUP(0)
	    00
	   ]
 00000208 00000000			count				DWORD		?


				; (insert variable definitions here)

 00000000			.code
 00000000			main PROC
					
					; Display Introduction and Prompt
 00000000  68 000000ED R		PUSH			OFFSET instruction_3
 00000005  68 00000081 R		PUSH			OFFSET instruction_2
 0000000A  68 00000056 R		PUSH			OFFSET instruction_1
 0000000F  68 0000003D R		PUSH			OFFSET author
 00000014  68 00000000 R		PUSH			OFFSET assignment
 00000019  E8 00000042			CALL			Introduction


 0000001E  B9 0000000A			MOV				ECX, 10
 00000023  C7 05 00000208 R		MOV				count, 0
	   00000000

 0000002D				_getValidStrings:
						; Loop to get valid integers
						; call ReadVal
 0000002D  68 00000208 R			PUSH			OFFSET count
 00000032  68 000001E7 R			PUSH			OFFSET string
 00000037  68 000001BF R			PUSH			OFFSET integers
 0000003C  68 000001AC R			PUSH			OFFSET input_try_again
 00000041  68 00000167 R			PUSH			OFFSET input_bad
 00000046  68 00000148 R			PUSH			OFFSET input_prompt
 0000004B  E8 00000064				CALL			ReadVal
 00000050  83 05 00000208 R			ADD				count, 4
	   04
 00000057  E2 D4				LOOP			_getValidStrings

					Invoke ExitProcess,0	; exit to operating system
 00000059  6A 00	   *	    push   +000000000h
 0000005B  E8 00000000 E   *	    call   ExitProcess
 00000060			main ENDP

				; -----------------------------
				; Name: Introduction
				;
				; FILL THIS OUT
				;	
				; Preconditions:
				;	FILL THIS OUT
				;
				; Receives:
				;	[ebp+8]			= assignment array
				;	[ebp+12]		= author array
				;	[ebp+16]		= instruction_1 array
				;	[ebp+20]		= instruction_2 array
				;	[ebp+24]		= instruction_3 array
				;
				; Returns:
				;	NONE
				; -----------------------------
 00000060			Introduction PROC
 00000060  55				PUSH					EBP
 00000061  8B EC			MOV						EBP, ESP
 00000063  52				PUSH					EDX

					; Call macro to display the introduction and prompt strings
					mDisplayString			[EBP+8]
 00000064  8B 55 08	     1		MOV			EDX, [EBP+8]
 00000067  E8 00000000 E     1		CALL		WriteString
 0000006C  E8 00000000 E		CALL					Crlf
					mDisplayString			[EBP+12]
 00000071  8B 55 0C	     1		MOV			EDX, [EBP+12]
 00000074  E8 00000000 E     1		CALL		WriteString
 00000079  E8 00000000 E		CALL					Crlf
 0000007E  E8 00000000 E		CALL					Crlf
					mDisplayString			[EBP+16]
 00000083  8B 55 10	     1		MOV			EDX, [EBP+16]
 00000086  E8 00000000 E     1		CALL		WriteString
 0000008B  E8 00000000 E		CALL					Crlf
					mDisplayString			[EBP+20]
 00000090  8B 55 14	     1		MOV			EDX, [EBP+20]
 00000093  E8 00000000 E     1		CALL		WriteString
 00000098  E8 00000000 E		CALL					Crlf
					mDisplayString			[EBP+24]
 0000009D  8B 55 18	     1		MOV			EDX, [EBP+24]
 000000A0  E8 00000000 E     1		CALL		WriteString
 000000A5  E8 00000000 E		CALL					Crlf
 000000AA  E8 00000000 E		CALL					Crlf

 000000AF  5A				POP						EDX
 000000B0  5D				POP						EBP
 000000B1  C2 0014			RET						20

 000000B4			Introduction ENDP

				; -----------------------------
				; Name: ReadVal
				;
				; FILL THIS OUT
				;	
				; Preconditions:
				;	FILL THIS OUT
				;
				; Receives:
				;	[ebp+8]			= 
				;	[ebp+12]		=  
				;	[ebp+16]		=  array
				;	[ebp+20]		=  array
				;	[ebp+24]		=  array
				;
				; Returns:
				;	NONE
				; -----------------------------
 000000B4			ReadVal PROC
 000000B4  55				PUSH					EBP
 000000B5  8B EC			MOV						EBP, ESP
 000000B7  50				PUSH					EAX
 000000B8  53				PUSH					EBX
 000000B9  51				PUSH					ECX
 000000BA  52				PUSH					EDX
 000000BB  57				PUSH					EDI
 000000BC  56				PUSH					ESI

 000000BD  8B 7D 14			MOV						EDI, [EBP+20]
 000000C0  8B 45 1C			MOV						EAX, [EBP+28]
 000000C3  03 38			ADD						EDI, [EAX]		; Set to end of array of integers
 000000C5  B8 00000000			MOV						EAX, 0
 000000CA  BB 00000000			MOV						EBX, 0

					; Call macro to display the introduction and prompt strings

 000000CF				_getString:
						mGetString				[EBP+8], [EBP+24], [EBP+32]
 000000CF  52		     1		PUSH		EDX
 000000D0  51		     1		PUSH		ECX
 000000D1  50		     1		PUSH		EAX
 000000D2  8B 55 08	     1		MOV			EDX, [EBP+8]
 000000D5  E8 00000000 E     1		CALL		WriteString
 000000DA  8B 55 18	     1		MOV			EDX, [EBP+24]
 000000DD  B9 0000000A	     1		MOV			ECX, HI
 000000E2  E8 00000000 E     1		CALL		ReadString
 000000E7  89 45 20	     1		MOV			[EBP+32], EAX
 000000EA  58		     1		POP			EAX
 000000EB  59		     1		POP			ECX
 000000EC  5A		     1		POP			EDX

						; Quick check to see if the user entered any characters
 000000ED  8B 45 20				MOV						EAX, [EBP+32]
 000000F0  83 F8 01				CMP						EAX, 1
 000000F3  7C 11				JL						_badString
 000000F5  8B 75 18				MOV						ESI, [EBP+24]
 000000F8  8B 4D 20				MOV						ECX, [EBP+32]
 000000FB  8B 45 20				MOV						EAX, [EBP+32]
 000000FE  83 E8 01				SUB						EAX, 1
 00000101  89 45 20				MOV						[EBP+32], EAX
 00000104  EB 4D				JMP						_verifyFirst 	; string contains >0 characters, time to verify if it has a + or - sign

 00000106				_badString:

						mDisplayString			[EBP+12]
 00000106  8B 55 0C	     1		MOV			EDX, [EBP+12]
 00000109  E8 00000000 E     1		CALL		WriteString
 0000010E  E8 00000000 E			CALL					Crlf

						mGetString				[EBP+16], [EBP+24], [EBP+32]
 00000113  52		     1		PUSH		EDX
 00000114  51		     1		PUSH		ECX
 00000115  50		     1		PUSH		EAX
 00000116  8B 55 10	     1		MOV			EDX, [EBP+16]
 00000119  E8 00000000 E     1		CALL		WriteString
 0000011E  8B 55 18	     1		MOV			EDX, [EBP+24]
 00000121  B9 0000000A	     1		MOV			ECX, HI
 00000126  E8 00000000 E     1		CALL		ReadString
 0000012B  89 45 20	     1		MOV			[EBP+32], EAX
 0000012E  58		     1		POP			EAX
 0000012F  59		     1		POP			ECX
 00000130  5A		     1		POP			EDX
 00000131  8B 45 20				MOV						EAX, [EBP+32]
 00000134  83 F8 01				CMP						EAX, 1
 00000137  7C CD				JL						_badString
 00000139  8B 75 18				MOV						ESI, [EBP+24]
 0000013C  8B 4D 20				MOV						ECX, [EBP+32]
 0000013F  8B 45 20				MOV						EAX, [EBP+32]
 00000142  83 E8 01				SUB						EAX, 1
 00000145  89 45 20				MOV						[EBP+32], EAX

 00000148  8B 07				MOV						EAX, [EDI]
 0000014A  B8 00000000				MOV						EAX, 0
 0000014F  89 07				MOV						[EDI], EAX

 00000151  EB 00				JMP						_verifyFirst

 00000153				_verifyFirst:
 00000153  AC					LODSB
 00000154  3C 2D				CMP						AL, 45
 00000156  74 09				JE						_negative
 00000158  3C 2B				CMP						AL, 43
 0000015A  74 13				JE						_positive
 0000015C  8B 75 18				MOV						ESI, [EBP+24]
 0000015F  EB 1C				JMP						_verifyString

 00000161				_negative:
 00000161  83 E9 01				SUB						ECX, 1
 00000164  8B 45 20				MOV						EAX, [EBP+32]
 00000167  83 E8 01				SUB						EAX, 1
 0000016A  89 45 20				MOV						[EBP+32], EAX
 0000016D  EB 30				JMP						_verifyStringNegative

 0000016F				_positive:
 0000016F  83 E9 01				SUB						ECX, 1
 00000172  8B 45 20				MOV						EAX, [EBP+32]
 00000175  83 E8 01				SUB						EAX, 1
 00000178  89 45 20				MOV						[EBP+32], EAX
 0000017B  EB 00				JMP						_verifyString

 0000017D				_verifyString:
 0000017D  AC					LODSB
 0000017E  3C 30				CMP						AL, 48
 00000180  7C 84				JL						_badString
 00000182  3C 39				CMP						AL, 57
 00000184  7F 80				JG						_badString
 00000186  83 E8 30				SUB						EAX, 48

 00000189  51					PUSH					ECX
 0000018A  8B 4D 20				MOV						ECX, [EBP+32]
 0000018D  83 F9 00				CMP						ECX, 0
 00000190  7F 02				JG						_multiply
 00000192  EB 35				JMP						_addDigit

 00000194				_multiply:
 00000194  BB 0000000A				MOV						EBX, 10
 00000199  F7 E3				MUL						EBX
 0000019B  E2 F7				LOOP					_multiply
 0000019D  EB 2A				JMP						_addDigit

 0000019F				_verifyStringNegative:
 0000019F  AC					LODSB
 000001A0  3C 30				CMP						AL, 48
 000001A2  0F 8C FFFFFF5E			JL						_badString
 000001A8  3C 39				CMP						AL, 57
 000001AA  0F 8F FFFFFF56			JG						_badString
 000001B0  83 E8 30				SUB						EAX, 48

 000001B3  51					PUSH					ECX
 000001B4  8B 4D 20				MOV						ECX, [EBP+32]
 000001B7  83 F9 00				CMP						ECX, 0
 000001BA  7F 02				JG						_multiplyNegative
 000001BC  EB 1F				JMP						_addDigitNegative

 000001BE				_multiplyNegative:
 000001BE  BB 0000000A				MOV						EBX, 10
 000001C3  F7 E3				MUL						EBX
 000001C5  E2 F7				LOOP					_multiplyNegative
 000001C7  EB 14				JMP						_addDigitNegative

 000001C9				_addDigit:
 000001C9  8B 1F				MOV						EBX, [EDI]
 000001CB  03 C3				ADD						EAX, EBX
 000001CD  89 07				MOV						[EDI], EAX
 000001CF  8B 45 20				MOV						EAX, [EBP+32]
 000001D2  83 E8 01				SUB						EAX, 1
 000001D5  89 45 20				MOV						[EBP+32], EAX
 000001D8  59					POP						ECX
 000001D9  E2 A2				LOOP					_verifyString
 000001DB  EB 1A				JMP						_end

 000001DD				_addDigitNegative:
 000001DD  8B 1F				MOV						EBX, [EDI]
 000001DF  03 C3				ADD						EAX, EBX
 000001E1  89 07				MOV						[EDI], EAX
 000001E3  8B 45 20				MOV						EAX, [EBP+32]
 000001E6  83 E8 01				SUB						EAX, 1
 000001E9  89 45 20				MOV						[EBP+32], EAX
 000001EC  59					POP						ECX
 000001ED  E2 B0				LOOP					_verifyStringNegative

 000001EF  8B 1F				MOV						EBX, [EDI]
 000001F1  F7 DB				NEG						EBX
 000001F3  89 1F				MOV						[EDI], EBX

 000001F5  EB 00				JMP						_end


					


						; check for any non number chars (except for minus and plus at start)

						
 000001F7				_end:
						; Need to check int for overflow
 000001F7  8B 07				MOV						EAX, [EDI]
 000001F9  E8 00000000 E			call					WriteInt

					
 000001FE  5E				POP						ESI
 000001FF  5F				POP						EDI
 00000200  5A				POP						EDX
 00000201  59				POP						ECX
 00000202  5D				POP						EBP
 00000203  58				POP						EAX
 00000204  5D				POP						EBP
 00000205  C2 001C			RET						28

 00000208			ReadVal ENDP


				; -----------------------------
				; Name: WriteVal
				;
				; FILL THIS OUT
				;	
				; Preconditions:
				;	FILL THIS OUT
				;
				; Receives:
				;	[ebp+8]			= assignment array
				;	[ebp+12]		= author array
				;	[ebp+16]		= instruction_1 array
				;	[ebp+20]		= instruction_2 array
				;	[ebp+24]		= instruction_3 array
				;
				; Returns:
				;	NONE
				; -----------------------------


				END main
Microsoft (R) Macro Assembler Version 14.28.29915.0	    06/04/21 18:49:48
2String Primitives and Macros    (Proj6_rostma.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000020C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000208 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Introduction . . . . . . . . . .	P Near	 00000060 _TEXT	Length= 00000054 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000B4 _TEXT	Length= 00000154 Public STDCALL
  _getString . . . . . . . . . .	L Near	 000000CF _TEXT	
  _badString . . . . . . . . . .	L Near	 00000106 _TEXT	
  _verifyFirst . . . . . . . . .	L Near	 00000153 _TEXT	
  _negative  . . . . . . . . . .	L Near	 00000161 _TEXT	
  _positive  . . . . . . . . . .	L Near	 0000016F _TEXT	
  _verifyString  . . . . . . . .	L Near	 0000017D _TEXT	
  _multiply  . . . . . . . . . .	L Near	 00000194 _TEXT	
  _verifyStringNegative  . . . .	L Near	 0000019F _TEXT	
  _multiplyNegative  . . . . . .	L Near	 000001BE _TEXT	
  _addDigit  . . . . . . . . . .	L Near	 000001C9 _TEXT	
  _addDigitNegative  . . . . . .	L Near	 000001DD _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000001F7 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000060 Public STDCALL
  _getValidStrings . . . . . . .	L Near	 0000002D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 0000000Ah   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
assignment . . . . . . . . . . .	Byte	 00000000 _DATA	
author . . . . . . . . . . . . .	Byte	 0000003D _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
count  . . . . . . . . . . . . .	DWord	 00000208 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
input_bad  . . . . . . . . . . .	Byte	 00000167 _DATA	
input_prompt . . . . . . . . . .	Byte	 00000148 _DATA	
input_try_again  . . . . . . . .	Byte	 000001AC _DATA	
instruction_1  . . . . . . . . .	Byte	 00000056 _DATA	
instruction_2  . . . . . . . . .	Byte	 00000081 _DATA	
instruction_3  . . . . . . . . .	Byte	 000000ED _DATA	
integers . . . . . . . . . . . .	DWord	 000001BF _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
string . . . . . . . . . . . . .	Byte	 000001E7 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
